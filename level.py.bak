import pygame
import random
from config import *
from tiles import Tile
from player import Player
from equipment import Equipment
from light import Light
from set_interval import setInterval

class Level:
	""" class for level """
	def __init__(self, surface, menu, clock):
		self.display = surface
		self.all_platform = pygame.sprite.Group()
		self.equipment_pos = [0,0]
		self.level_speed = 2
		self.menu = menu
		self.score = 0

		self.clock = clock

		self.setup_level()

	"""

	 Utils

	"""

	def stop_all_interval(self):
		self.interval_handler_for_increase_score.stop()
		self.interval_handler_for_spwan_platform.stop()

	def increase_score(self):
		self.score += 1
		self.increase_speed_level()

	def show_score(self):
		self.text_header(str(self.score), (WIDTH/2,HEIGHT/2), 100, self.display)

	def draw_circle_for_lighting(self,surface,pos):
		img = './assets/light.png'
		self.light.add(Light(img, (350,350), pos))
		self.light.draw(surface)

	def text_header(self, text, pos, size, surface):
		font = pygame.font.Font('./assets/Pixeled.ttf', size)
		text = font.render(text, True, (255,255,255))
		textRect = text.get_rect(center = pos)
		surface.blit(text,textRect)

	def set_timer(self, eventObj, interval):
	    func = lambda x: pygame.event.post(x)
	    setInterval(func=func, sec=interval, args=[eventObj])

	def add_fog(self,display):
		player = self.player.sprite
		self.fog = pygame.surface.Surface((WIDTH,HEIGHT))
		self.fog.fill((50,50,50))
		self.light_pos[0] += (self.equipment_pos[0] - self.light_pos[0])
		self.light_pos[1] += (self.equipment_pos[1]- self.light_pos[1])

		self.draw_circle_for_lighting(self.fog,(self.light_pos[0],self.light_pos[1]))
		self.display.blit(self.fog,(0,0),special_flags=pygame.BLEND_MULT)

	def spwan_platform(self):
		random_amount = random.randint(15,20)
		random_x = random.randint(0,WIDTH-86)
		random_y = random.randint(10,30)
		random_y = -random_y
		for i in range(random_amount):
			self.all_platform.add(Tile('./assets/plat1.png', (86,16), (random_x,random_y+HEIGHT)))

	def spwan_player(self):
		self.player.add(Player('./assets/player.png',(32,32),(WIDTH/2-86,100)))

	"""

	 Game Logic

	"""

	def setup_level(self):
		# set time to randomly spwan platform
		self.SPWAN_PLATFORM = pygame.USEREVENT + 0
		self.time_to_spwan_platform = 300
		self.interval_handler_for_spwan_platform = pygame.time.set_timer(self.SPWAN_PLATFORM, self.time_to_spwan_platform)

		# increase score every 5 second
		self.INCREASE_SCORE = pygame.USEREVENT + 1
		self.time_to_increase_score = 2000
		self.interval_handler_for_increase_score = pygame.time.set_timer(self.INCREASE_SCORE, self.time_to_increase_score)

		# initial platform 
		self.all_platform.add(Tile('./assets/plat1.png',(86,16),(WIDTH/2-86,HEIGHT)))

		# make player
		self.player = pygame.sprite.GroupSingle()
		self.spwan_player()

		# make equipment
		self.equipment = pygame.sprite.GroupSingle()
		self.equipment_pos[0] = self.player.sprite.rect.x - 30
		self.equipment_pos[1] = self.player.sprite.rect.y - 10
		self.equipment.add(Equipment('./assets/pet.png', (16,16), (self.equipment_pos[0], self.equipment_pos[1])))

		# light position
		self.light = pygame.sprite.GroupSingle()
		self.light_pos = [0,0]

	def increase_speed_level(self):
		if self.time_to_spwan_platform <= 100:
			pygame.time.set_timer(self.SPWAN_PLATFORM, self.time_to_spwan_platform-100)
		self.level_speed += 1


	def update_equipment_pos(self):
		x = None
		if self.player.sprite.flipped:
			x = 30
		else:
			x = -10
		self.equipment_pos[0] += (self.player.sprite.rect.centerx - self.equipment_pos[0] - 15 + x) / 10
		self.equipment_pos[1] += (self.player.sprite.rect.centery - self.equipment_pos[1] - 20) / 10
		self.equipment.update(self.equipment_pos[0],self.equipment_pos[1])

	def vertical_movement_col(self):
		player = self.player.sprite
		self.player.sprite.apply_gravity()

		for sprite in self.all_platform.sprites():
			if sprite.rect.colliderect(player.rect):
				if player.rect.bottom >= sprite.rect.top:
					if player.direction.y > 0: 
						player.rect.bottom = sprite.rect.top
						player.direction.y = 0
						player.on_ground = True
					elif player.direction.y < 0:
						player.rect.top = sprite.rect.bottom
						player.direction.y = 0

	def render_group(self,group):
		for sprite in group:
			self.display.blit(sprite.image,(sprite.rect.x,sprite.rect.y))

	def move_all_platform(self):
		for sprite in self.all_platform:
			sprite.move_y(self.level_speed)

	def show_fps(self):
		self.text_header("FPS " + str(int(self.clock.get_fps())), (65,15), 20, self.display)

	def render(self):
		self.show_score()
		self.render_group(self.all_platform)
		self.player.draw(self.display)
		self.equipment.draw(self.display)
		self.add_fog(self.display)
		self.show_fps()

	def check_game_over(self):
		if self.player.sprite.life >= 0 and self.player.sprite.is_fall:
			self.player.die()
			self.player.sprite.kill()
			self.player.add(Player('./assets/player.png',(32,32),(WIDTH/2-86,100)))
			self.all_platform.add(Tile('./assets/plat1.png',(86,16),(WIDTH/2-86,HEIGHT)))
		elif self.player.sprite.life <= 0:
			self.player.sprite.kill()
			self.menu()
			
	def update(self):
		self.check_game_over()
	 	self.move_all_platform()
	 	self.all_platform.update()
	 	self.player.update()
	 	self.vertical_movement_col()
	 	self.update_equipment_pos()

	"""
	
	 Output Method

	"""

	def run(self):
		self.render()
		self.update()
